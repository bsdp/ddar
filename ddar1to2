#! /usr/bin/env python

# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import sys
import sqlite3
from tempfile import NamedTemporaryFile

def create_tables(cursor):
    
    cursor.execute('''
CREATE TABLE member (member_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    length INTEGER,
    hash BLOB,
    create_time INTEGER,
    PRIMARY KEY (member_id), 
    UNIQUE (member_id), 
    UNIQUE (name))''')

    cursor.execute('''
CREATE TABLE mc (mc_id INTEGER NOT NULL,
    member_id INTEGER,
    chunk_id INTEGER,
    offset INTEGER NOT NULL,
    PRIMARY KEY (mc_id),
    UNIQUE (mc_id),
    FOREIGN KEY(member_id) REFERENCES "member" (member_id) ON DELETE CASCADE,
    FOREIGN KEY(chunk_id) REFERENCES "chunk" (chunk_id))''')

    cursor.execute('''
CREATE TABLE chunk (chunk_id INTEGER NOT NULL,
    hash BLOB NOT NULL,
    length INTEGER NOT NULL,
    PRIMARY KEY (chunk_id), 
    UNIQUE (chunk_id), 
    UNIQUE (hash))''')
    
    cursor.execute('CREATE UNIQUE INDEX udx_mc_member_id_offset_chunk_id ON "mc" (member_id, "offset", chunk_id)')
    cursor.execute('CREATE INDEX idx_mc_chunk_id ON "mc" (chunk_id)')
    

def migrate(dirname):
    '''Migrate the database from archive version 1 to 2.'''

    if not os.path.exists(dirname):
        raise RuntimeError("archive %s not found" % dirname)
    elif not os.path.isdir(dirname):
        raise RuntimeError("%s exists but is not a ddar directory" % dirname)

    namefile    = os.path.join(dirname, 'format/name')
    versionfile = os.path.join(dirname, 'format/version')

    format_name = None
    version = None
    
    try:
        with open(namefile, 'r') as f:
            format_name = f.read().strip()
    except:
        raise RuntimeError('%s is not a ddar directory' % dirname)
    else:
        if format_name != 'ddar':
            raise RuntimeError('%s is not a ddar directory' % dirname)

    with open(versionfile, 'r') as f:
        version = f.read().strip()
    
    if version != '1':
        raise RuntimeError('%s uses ddar archive version %s ' % (dirname, version) +
                           'but migration is only supported for version 1')

    old_file = os.path.join(dirname, "db")
    old = sqlite3.connect(old_file)
    old.text_factory = str
    old.execute('PRAGMA foreign_keys = ON')
    old_cursor1 = old.cursor()
    old_cursor2 = old.cursor()

    tmp = NamedTemporaryFile(dir=dirname, delete=True)
    tmp.close()
    
    new_file = tmp.name
    new = sqlite3.connect(new_file)
    new_cursor = new.cursor()
    create_tables(new_cursor)
    new.text_factory = str
    new.execute('PRAGMA foreign_keys = ON')
    
    old_cursor1.execute('SELECT id, name, length, hash, create_time ' +
                        'FROM member')
    member_row = old_cursor1.fetchone()
    m = 0
    
    while member_row:
        old_member_id, mname, mlength, mhash, create_time = member_row
        
        m += 1
        print 'migrating [%s] member: %s ' % (m, mname)
        
        new_cursor.execute('INSERT INTO member ' + 
                           '(name, length, hash, create_time) ' +
                           'VALUES (?, ?, ?, ?)',
                           (mname, mlength, mhash, create_time))
        new_member_id = new_cursor.lastrowid
        
        old_cursor2.execute('SELECT hash, offset, length ' +
                            'FROM chunk WHERE member_id=? ' +
                            'ORDER BY offset', (old_member_id,))
        
        chunk_row = old_cursor2.fetchone()
                
        while chunk_row:
            h, offset, length = chunk_row
            
            new_cursor.execute('SELECT chunk_id FROM chunk WHERE hash=?',
                               (h, ))
            chunk = new_cursor.fetchone()

            if not chunk:
                new_cursor.execute('INSERT INTO chunk (hash, length) ' +
                                   'VALUES (?, ?)', (h, length))
                new_chunk_id = new_cursor.lastrowid
            else:
                new_chunk_id = chunk[0]
            
            new_cursor.execute('INSERT INTO mc ' +
                               '(member_id, chunk_id, offset) ' +
                               'VALUES (?, ?, ?)',
                               (new_member_id, new_chunk_id, offset))
            chunk_row = old_cursor2.fetchone()

        member_row = old_cursor1.fetchone()
        new.commit()    # Commit after each member
    
    old_cursor1.close()
    old_cursor2.close()
    new_cursor.close()
    
    old.close()
    new.close()

    # Update the archive version format file
    with open(versionfile, 'w') as f: 
        f.write("2\n")

    os.rename(old_file, os.path.join(os.path.dirname(old_file), "db_v1.bak"))
    os.rename(new_file, old_file)


if __name__ == '__main__':

    parser = argparse.\
        ArgumentParser(description='ddar archive 1 to 2 migration tool')
    parser.add_argument('archive', metavar="archive", help='Archive')
    
    args = parser.parse_args()
    
    try:
        migrate(args.archive)
    except Exception as e:
        print >>sys.stderr, 'ddar1to2:', e.message
        sys.exit(1)
